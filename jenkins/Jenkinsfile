pipeline {
  agent any

  environment {
    AWS_REGION = 'eu-west-1'
    ECR_REGISTRY = "184083913321.dkr.ecr.${AWS_REGION}.amazonaws.com"
    ECR_REPO = 'nodejs-app'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
    FULL_IMAGE_NAME = "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
    LATEST_IMAGE_NAME = "${ECR_REGISTRY}/${ECR_REPO}:latest"
    EKS_CLUSTER = 'nodejs-eks'
    NAMESPACE = 'jenkins'
    RECIPIENTS = 'bronandrews@gmail.com'
  }

  stages {
    stage('Git Checkout') {
      steps {
        sh '''
          echo "Checkout from GitHub repo "
        '''

        git branch: 'main',
            url: 'https://github.com/bronandrews/NodeJs-Tech-Test.git'
      }
    }
/* */
    stage('Lint YAML & K8s manifests') {
      steps {
        sh '''
          echo "Running yamllint..."
          yamllint k8s/
        '''
      }
    }
/* * /
    stage('Mocked Unit Tests') {
      steps {
        sh '''
          echo "Running mocked unit tests..."
          echo "Tests passed."  # Replace with `npm test` if real tests are available
        '''
      }
    }
/**/

    stage('Connect to ECR') {
        steps {
            withCredentials([usernamePassword(credentialsId: 'jenkins-ecr-user', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh '''
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set region $AWS_REGION

                  echo "Connect to ECR..."
                  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                '''
            }
        }
    }

    stage('Docker Build & Push to ECR') {
      steps {
        script {
          sh '''
            echo "Build Docker image: ${FULL_IMAGE_NAME}"
            docker build -t ${FULL_IMAGE_NAME} ./app

            echo "Pushing image to ECR, include latest tag"
            docker push ${FULL_IMAGE_NAME}
            docker push ${LATEST_IMAGE_NAME}
          '''
        }
      }
    }
/* */
    stage('Connect to EKS') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'jenkins-ecr-user', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh '''
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION

            echo "Assume EKS Cluster Role..."
            aws sts assume-role \
              --role-arn arn:aws:iam::184083913321:role/eks-cluster-role \
              --role-session-name jenkins-session > /tmp/assumed-role.json

            echo "Initialise kubeconfig to the EKS cluster..."
            aws eks update-kubeconfig --region ${AWS_REGION} --name ${EKS_CLUSTER}

            echo "Test kubectrl connection..."
            kubectl get nodes
          '''
        }
      }
    }
/* */
    stage('Deploy to EKS') {
      steps {
        script {
          sh '''
            echo "Applying EKS deployment..."
            kubectl apply -f k8s/deployment.yaml

            echo "Applying EKS service..."
            kubectl apply -f k8s/service.yaml
          '''
        }
      }
    }
/* */
  }

/* * /
  post {
    success {
      echo "Pipeline completed successfully"
      script {
        // Email
        mail to: "$RECIPIENTS",
        subject: "NodeJs Build #${BUILD_NUMBER} Success",
        body: "The Jenkins pipeline has completed successfully."
      }
    }
    failure {
      echo "Pipeline failed"
      script {
        // Email
        mail to: "$RECIPIENTS",
        subject: "NodeJs Build #${BUILD_NUMBER} Failed",
        body: "The Jenkins pipeline has failed. Please check the console output."
      }
    }
  }
/* */
}
